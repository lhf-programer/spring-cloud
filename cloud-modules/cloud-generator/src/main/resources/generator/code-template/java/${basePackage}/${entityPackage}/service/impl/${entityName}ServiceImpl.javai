package ${basePackage}.${entityPackage}.service.impl;

import ${basePackage}.${entityPackage}.entity.${entityName};
import ${basePackage}.${entityPackage}.mapper.${entityName}Mapper;
import ${basePackage}.${entityPackage}.service.I${entityName}Service;
import com.lvhaifeng.cloud.common.error.ErrCodeBaseConstant;
import com.lvhaifeng.cloud.common.exception.BusinessException;
import com.lvhaifeng.cloud.common.util.EntityUtils;
import org.springframework.stereotype.Service;

import org.springframework.beans.BeanUtils;
import org.springframework.transaction.annotation.Transactional;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;

import java.io.Serializable;
import java.util.Collection;

/**
 * @Description: ${tableVo.ftlDescription}
 * @Author: haifeng.lv
 * @Date: ${.now?string["yyyy-MM-dd HH:mm"]}
 */
@Service
public class ${entityName}ServiceImpl extends ServiceImpl<${entityName}Mapper, ${entityName}> implements I${entityName}Service {
    @Override
    @Transactional(rollbackFor = Exception.class)
    public IPage<${entityName}> page${entityName}List(${entityName} ${entityName?uncap_first}, Integer pageNo, Integer pageSize) {
        QueryWrapper<${entityName}> queryWrapper = new QueryWrapper<>();
        Page<${entityName}> page = new Page<>(pageNo, pageSize);
        IPage<${entityName}> pageList = baseMapper.selectPage(page, queryWrapper);
        return pageList;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean save${entityName}(${entityName} ${entityName?uncap_first}) {
        EntityUtils.setDefaultValue(${entityName?uncap_first});
        return super.save(${entityName?uncap_first});
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean updateBy${entityName}Id(${entityName} ${entityName?uncap_first}) {
        ${entityName} ${entityName?uncap_first}Entity = baseMapper.selectById(${entityName?uncap_first}.getId());
        if(${entityName?uncap_first}Entity == null) {
            throw new BusinessException(ErrCodeBaseConstant.COMMON_PARAM_ERR);
        } else {
            BeanUtils.copyProperties(${entityName?uncap_first}, ${entityName?uncap_first}Entity);
        }
        EntityUtils.setDefaultValue(${entityName?uncap_first}Entity);
        return super.updateById(${entityName?uncap_first}Entity);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean removeBy${entityName}Id(Serializable id) {
        return super.removeById(id);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean removeBy${entityName}Ids(Collection<? extends Serializable> ids) {
        if(ids.isEmpty()) {
            throw new BusinessException(ErrCodeBaseConstant.COMMON_PARAM_ERR);
        }else {
            return super.removeByIds(ids);
        }
    }

    @Override
    public ${entityName} getBy${entityName}Id(Serializable id) {
        ${entityName} ${entityName?uncap_first} = super.getById(id);
        if (null == ${entityName?uncap_first}) {
            throw new BusinessException(ErrCodeBaseConstant.COMMON_PARAM_ERR);
        } else {
            return ${entityName?uncap_first};
        }
    }
}
