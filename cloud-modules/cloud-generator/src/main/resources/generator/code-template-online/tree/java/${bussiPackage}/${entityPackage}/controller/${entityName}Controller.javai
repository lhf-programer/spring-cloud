package ${bussiPackage}.${entityPackage}.controller;

import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import com.lvhaifeng.cloud.common.vo.Result;
import ${bussiPackage}.${entityPackage}.entity.${entityName};
import ${bussiPackage}.${entityPackage}.service.I${entityName}Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

 /**
 * @Description: ${tableVo.ftlDescription}
 * @Author: haifeng.lv
 * @Date:   ${.now?string["yyyy-MM-dd"]}
 * @Version: V1.0
 */
<#assign pidFieldName = "">
<#list originalColumns as po>
<#if po.fieldDbName == tableVo.extendParams.pidField>
<#assign pidFieldName = po.fieldName>
</#if>
</#list>
@RestController
@RequestMapping("/${entityName?uncap_first}")
@Slf4j
public class ${entityName}Controller {
	@Autowired
	private I${entityName}Service ${entityName?uncap_first}Service;
	
	/**
	  * 分页列表查询
	 * @param ${entityName?uncap_first}
	 * @param pageNo
	 * @param pageSize
	 * @param req
	 * @return
	 */
	@GetMapping(value = "/rootList")
	public Result<IPage<${entityName}>> queryPageList(${entityName} ${entityName?uncap_first},
									  @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
									  @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
									  HttpServletRequest req) {
		if(oConvertUtils.isEmpty(${entityName?uncap_first}.get${pidFieldName?cap_first}())){
			${entityName?uncap_first}.set${pidFieldName?cap_first}("0");
		}
		Result<IPage<${entityName}>> result = new Result<IPage<${entityName}>>();
		QueryWrapper<${entityName}> queryWrapper = new QueryWrapper<${entityName}>();
		Page<${entityName}> page = new Page<${entityName}>(pageNo, pageSize);
		IPage<${entityName}> pageList = ${entityName?uncap_first}Service.page(page, queryWrapper);
		result.setSuccess(true);
		result.setResult(pageList);
		return result;
	}
	
	@GetMapping(value = "/childList")
	public Result<List<${entityName}>> queryPageList(${entityName} ${entityName?uncap_first},HttpServletRequest req) {
		Result<List<${entityName}>> result = new Result<List<${entityName}>>();
		QueryWrapper<${entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${entityName?uncap_first}, req.getParameterMap());
		List<${entityName}> list = ${entityName?uncap_first}Service.list(queryWrapper);
		result.setSuccess(true);
		result.setResult(list);
		return result;
	}
	
	
	/**
	  *   添加
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@PostMapping(value = "/add")
	public Result<${entityName}> add(@RequestBody ${entityName} ${entityName?uncap_first}) {
		Result<${entityName}> result = new Result<${entityName}>();
		try {
			${entityName?uncap_first}Service.add${entityName}(${entityName?uncap_first});
			result.success("添加成功！");
		} catch (Exception e) {
			log.error(e.getMessage(),e);
			result.error500("操作失败");
		}
		return result;
	}
	
	/**
	  *  编辑
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@PutMapping(value = "/edit")
	public Result<${entityName}> edit(@RequestBody ${entityName} ${entityName?uncap_first}) {
		Result<${entityName}> result = new Result<${entityName}>();
		try {
			${entityName?uncap_first}Service.update${entityName}(${entityName?uncap_first});
			result.success("修改成功!");
		} catch (Exception e) {
			result.error500(e.getMessage());
		}
		return result;
	}
	
	/**
	  *   通过id删除
	 * @param id
	 * @return
	 */
	@DeleteMapping(value = "/delete")
	public Result<${entityName}> delete(@RequestParam(name="id",required=true) String id) {
		Result<${entityName}> result = new Result<${entityName}>();
		try {
			${entityName?uncap_first}Service.delete${entityName}(id);
			result.success("删除成功!");
		} catch (Exception e) {
			result.error500(e.getMessage());
		}
		return result;
	}
	
	/**
	  *  批量删除
	 * @param ids
	 * @return
	 */
	@DeleteMapping(value = "/deleteBatch")
	public Result<${entityName}> deleteBatch(@RequestParam(name="ids",required=true) String ids) {
		Result<${entityName}> result = new Result<${entityName}>();
		if(ids==null || "".equals(ids.trim())) {
			result.error500("参数不识别！");
		}else {
			this.${entityName?uncap_first}Service.removeByIds(Arrays.asList(ids.split(",")));
			result.success("删除成功!");
		}
		return result;
	}
	
	/**
	  * 通过id查询
	 * @param id
	 * @return
	 */
	@GetMapping(value = "/queryById")
	public Result<${entityName}> queryById(@RequestParam(name="id",required=true) String id) {
		Result<${entityName}> result = new Result<${entityName}>();
		${entityName} ${entityName?uncap_first} = ${entityName?uncap_first}Service.getById(id);
		if(${entityName?uncap_first}==null) {
			result.error500("未找到对应实体");
		}else {
			result.setResult(${entityName?uncap_first});
			result.setSuccess(true);
		}
		return result;
	}

}
